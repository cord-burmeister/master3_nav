amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_link"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 8.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    # The fully-qualified type of the plugin class. Options are “nav2_amcl::DifferentialMotionModel” 
    # and “nav2_amcl::OmniMotionModel”. Users can also provide their own custom motion model plugin type.
    # robot_model_type: "nav2_amcl::DifferentialMotionModel"
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: scan
    # Setting pose (29.350000): 0.019 0.003 0.000

    set_initial_pose: true
    always_reset_initial_pose: true

    initial_pose:
      x: 0.019 
      y: .003
      z: 0.0
      yaw: 0.0 #yaw: 1.615

bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    action_server_result_timeout: 900.0
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.

    # plugin_lib_names is used to add custom BT plugins to the executor (vector of strings).
    # Built-in plugins are added automatically
    # plugin_lib_names: []

    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    costmap_update_timeout: 0.30
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]
    use_realtime_priority: false

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      # The minimum distance (in meters) that the robot must move to be considered making progress. The default value is 0.5 meters
      required_movement_radius: 0.5
      # The maximum time (in seconds) allowed for the robot to move the required distance. The default value is 10 seconds1.
      movement_time_allowance: 20.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      # Default 56. Number of time steps (points) in each sampled trajectory
      time_steps: 56
      # Default: 0.05. Time interval (s) between two sampled points in trajectories.
      model_dt: 0.05
      # Default 1000. Count of randomly sampled candidate trajectories
      batch_size: 2000
      # Maximum forward acceleration (m/s^2).
      ax_max: 3.0
      # Maximum deceleration along the X-axis (m/s^2).
      ax_min: -3.0
      # Maximum lateral acceleration in either direction, if using Omni motion model (m/s^2).
      ay_max: 3.0
      # Maximum angular acceleration (rad/s^2).
      az_max: 3.5
      # Default 0.2. Sampling standard deviation for VX
      vx_std: 0.2
      # Default 0.2. Sampling standard deviation for VY
      vy_std: 0.2
      # Default 0.4. Sampling standard deviation for Wz
      # This parameter controls the standard deviation for the angular velocity sampling. By adjusting this, you can influence 
      # how much rotational variation is considered during trajectory sampling.
      wz_std: 1.8
      # Default 0.5. Max VX (m/s)
      vx_max: 0.5
      # Default -0.35. Min VX (m/s)
      vx_min: -0.35
      # Default 0.5. Max VY in either direction, if holonomic. (m/s)
      vy_max: 0.25
      # Default 1.9. Max WZ (rad/s)
      # wz_max: 1.9
      wz_max: 13.8
      # Default 1. Iteration count in MPPI algorithm. Recommend to keep as 1 and prefer more batches.
      iteration_count: 1
      # Default: 0.3. Selectiveness of trajectories by their costs (The closer this value to 0, the "more" 
      # we take in consideration controls with less cost), 0 mean use control with best cost, huge value will lead to just taking
      #  mean of all trajectories without cost consideration
      temperature: 0.3
      # Default: 0.015. A trade-off between smoothness (high) and low energy (low). This is a complex parameter that likely won't
      #  need to be changed from the default of 0.1 which works well for a broad range of cases. See Section 3D-2 in "Information 
      # Theoretic Model Predictive Control: Theory and Applications to Autonomous Driving" for detailed information.
      gamma: 0.015
      # Default: DiffDrive. Type of model [DiffDrive, Omni, Ackermann].
      motion_model: "DiffDrive"
      # Default: false. Publish visualization of trajectories, which can slow down the controller significantly. Use only for debugging.
      visualize: true
      # 	Default false. Whether to regenerate noises each iteration or use single noise distribution computed on initialization and reset. 
      # Practically, this is found to work fine since the trajectories are being sampled stochastically from a normal distribution and 
      # reduces compute jittering at run-time due to thread wake-ups to resample normal distribution.  
      regenerate_noises: true
      # Path Handler
      # Default: 1.5. Distance ahead of nearest point on path to robot to prune path to.
      prune_distance: 1.7
      # Default: 0.1. Time tolerance for data transformations with TF.
      transform_tolerance: 0.1
      # max_robot_pose_search_dist	double	Default: Costmap half-size. Max integrated distance ahead of robot pose to search for nearest path point in case of path looping.
      # enforce_path_inversion	double	Default: False. If true, it will prune paths containing cusping points for segments changing directions 
      #   (e.g. path inversions) such that the controller will be forced to change directions at or very near the planner's requested inversion point. 
      #    This is targeting Smac Planner users with feasible paths who need their robots to switch directions where specifically requested.
      # inversion_xy_tolerance	double	Default: 0.2. Cartesian proximity (m) to path inversion point to be considered "achieved" to pass on the rest of the path after path inversion.
      # inversion_yaw_tolerance	double	Default: 0.4. Angular proximity (radians) to path inversion point to be considered "achieved" to pass on the rest of the path after path inversion. 0.4 rad = 23 deg.
      TrajectoryVisualizer:
        # Default: 5. The step between trajectories to visualize to downsample candidate trajectory pool.
        trajectory_step: 5
        # 	Default: 3. The step between points on trajectories to visualize to downsample trajectory density.
        time_step: 3
      AckermannConstraints:
        # minimum turning radius for ackermann motion model
        min_turning_r: 0.2
      # Default: None. Critics (plugins) names
      critics: [
        "ConstraintCritic", "CostCritic", "GoalCritic",
        "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic",
        "PathAngleCritic", "PreferForwardCritic"]
      # ----------------------------------------------------------------------------------------------------
      # This critic incentivizes navigating away from obstacles and critical collisions using either a circular
      #  robot point-check or full SE2 footprint check using distances from obstacles.
      ObstaclesCritic:
        # Weight to apply to critic for near collisions closer than collision_margin_distance to prevent near collisions only 
        # as a method of virtually inflating the footprint. This should not be used to generally influence obstacle avoidance away from critical collisions.
        critical_weight: 20 
        # Weight to apply to critic for generally preferring routes in lower cost space. This is separated from the critical term to allow
        #  for fine tuning of obstacle behaviors with path alignment for dynamic scenes without impacting actions which may directly lead to near-collisions. 
        # This is applied within the inflation_radius distance from obstacles.
        repulsion_weight: 1.5
        # Power order to apply to term.
        cost_power: 1
        # Whether to use point cost (if robot is circular or low compute power) or compute SE2 footprint cost.
        consider_footprint: false
        # Cost to apply to a true collision in a trajectory.
        collision_cost: 100000.0
        # Margin distance (m) from collision to apply severe penalty, similar to footprint inflation. Between 0.05-0.2 is reasonable. 
        # Note that it will highly influence the controller not to enter spaces more confined than this, so ensure this parameter 
        # is set lower than the narrowest you expect the robot to need to traverse through.
        collision_margin_distance: 0.10
        # Distance (m) near goal to stop applying preferential obstacle term to allow robot to smoothly converge to goal pose in close proximity to obstacles
        near_goal_distance: 0.50
        # Exponential decay factor across inflation radius. This should be the same as for your inflation layer (Humble only)
        cost_scaling_factor: 3.0
        # Radius to inflate costmap around lethal obstacles. This should be the same as for your inflation layer (Humble only)
        inflation_radius: 0.7
        # Name of the inflation layer. If empty, it uses the last inflation layer in the costmap. If you have multiple inflation layers, 
        # you may want to specify the name of the layer to use.'
        # inflation_layer_name: ""
      # ----------------------------------------------------------------------------------------
      # This critic penalizes trajectories that have components outside of the set dynamic or kinematic constraints
      ConstraintCritic:
        enabled: true
        # Default 1. Power order to apply to term.
        cost_power: 1
        # Default 4.0. Weight to apply to critic term.
        cost_weight: 4.0
      # ----------------------------------------------------------------------------------------------------
      # This critic incentivizes navigating spatially towards the goal when in reasonable proximity to goal
      GoalCritic:
        enabled: true
        # Default 1. Power order to apply to term.
        cost_power: 1
        # Default 5.0. Weight to apply to critic term.
        cost_weight: 5.0
        # Default 1.4. Distance between robot and goal above which goal cost starts being considered
        # It is wise to start with this as being the same as your prediction horizon to have a clean hand-off with the path follower critic.
        threshold_to_consider: 1.4
      # ----------------------------------------------------------------------------------------------------
      # This critic incentivizes navigating to achieve the angle of the goal posewhen in reasonable proximity to goal
      GoalAngleCritic:
        enabled: true
        # Default 1. Power order to apply to term.
        cost_power: 1
        # Default 3.0. Weight to apply to critic term.
        cost_weight: 3.0
        # Default 0.5. Minimal distance between robot and goal above which angle goal cost considered.
        threshold_to_consider: 0.5
      # ----------------------------------------------------------------------------------------------------
      # This critic incentivizes moving in the forward direction, rather than reversing.
      PreferForwardCritic:
        enabled: true
        # Power order to apply to term.
        cost_power: 1
        # Weight to apply to critic term.
        cost_weight: 5.0
        # Distance (m) between robot and goal to stop considering preferring forward and allow goal critics to take over.
        threshold_to_consider: 0.5
      # ----------------------------------------------------------------------------------------------------
      # Uses inflated costmap cost directly to avoid obstacles
      # This critic incentivizes navigating away from obstacles and critical collisions using either a circular robot point-check 
      # or full SE2 footprint check using the costmap values.        
      CostCritic:
        enabled: true
        # consider_footprint: False # Default: False. Whether to use point cost (if robot is circular or low compute power) or compute SE2 footprint cost.
        # Default 1. Power order to apply to term.
        cost_power: 1
        # Default 3.81. Wight to apply to critic to avoid obstacles.
        cost_weight: 3.81
        # Default 300.0. Cost to apply to a pose with any point in in inflated space to prefer distance from obstacles.
        critical_cost: 300.0
        # Default: False. Whether to use point cost (if robot is circular or low compute power) or compute SE2 footprint cost.
        consider_footprint: true
        # Default 1000000.0. Cost to apply to a true collision in a trajectory.
        collision_cost: 1000000.0
        # Default 0.5. Distance near goal to stop applying preferential obstacle term to allow robot to smoothly converge to goal
        #  pose in close proximity to obstacles.
        near_goal_distance: 0.5
        # inflation_layer_name: "" # Default "". Name of the inflation layer. If empty, it uses the last inflation layer in the costmap. 
        # If you have multiple inflation layers, you may want to specify the name of the layer to use.
        # Default 2. Step of trajectory points to evaluate for costs since otherwise so dense represents multiple points for a single costmap cell.
        trajectory_point_step: 2
      # ----------------------------------------------------------------------------------------------------
      # This critic incentivizes aligning with the global path, if relevant. It does not implement path following behavior.
      PathAlignCritic:
        enabled: true
        # Power order to apply to term.
        cost_power: 1
        # Weight to apply to critic term.
        cost_weight: 14.0
        # Maximum proportion of the path that can be occupied before this critic is not considered to allow the obstacle and path follow critics
        # to avoid obstacles while following the path’s intent in presence of dynamic objects in the scene. Between 0-1 for 0-100%.
        max_path_occupancy_ratio: 0.05
        # The step to take in trajectories for evaluating them in the critic. Since trajectories are extremely dense, its unnecessary 
        # to evaluate each point and computationally expensive.
        trajectory_point_step: 4
        # Distance (m) between robot and goal to stop considering path alignment and allow goal critics to take over.
        threshold_to_consider: 0.5
        # Checks that the candidate trajectories are sufficiently far along their way tracking the path to apply the alignment critic. 
        # This ensures that path alignment is only considered when actually tracking the path, preventing awkward initialization motions 
        # preventing the robot from leaving the path to achieve the appropriate heading.
        offset_from_furthest: 20
        # Whether to consider path’s orientations in path alignment, which can be useful when paired with feasible smac planners to incentivize 
        # directional changes only where/when the smac planner requests them. If you want the robot to deviate and invert directions where 
        # the controller sees fit, keep as false. If your plans do not contain orientation information (e.g. navfn), keep as false.
        use_path_orientations: false
      # ----------------------------------------------------------------------------------------------------
      # This critic incentivizes making progress along the path. This is what drives the robot forward along the path.
      PathFollowCritic:
        enabled: true
        # Power order to apply to term.
        cost_power: 1
        # Weight to apply to critic term.
        cost_weight: 5.0
        # Number of path points after furthest one any trajectory achieves to drive path tracking relative to.
        offset_from_furthest: 5
        # Distance (m) between robot and goal to stop considering path following and allow goal critics to take over. It is wise to start with 
        # this as being the same as your prediction horizon to have a clean hand-off with the goal critic.
        threshold_to_consider: 1.4
      # ----------------------------------------------------------------------------------------------------
      # This critic penalizes trajectories at a high relative angle to the path. This helps the robot make sharp turns when necessary 
      # due to large accumulated angular errors.
      PathAngleCritic:
        enabled: true
        # Default 1. Power order to apply to term.
        cost_power: 1
        # Default 2.2. Weight to apply to critic term.
        cost_weight: 2.0
        # Default 4. Number of path points after furthest one any trajectory achieves to compute path angle relative to.
        offset_from_furthest: 4
        # Default 0.5. Distance between robot and goal above which path angle cost stops being considered
        threshold_to_consider: 0.5
        # Default 0.785398. Angular distance between robot and goal above which path angle cost starts being considered
        max_angle_to_furthest: 0.1
        # Default 0 (Forward Preference). Enum type for mode of operations for the path angle critic depending on path input types and behavioral desires. 
        # 0: Forward Preference, penalizes high path angles relative to the robot's orientation to incentivize turning towards the path. 
        # 1: No directional preference, penalizes high path angles relative to the robot's orientation or mirrored orientation (e.g. reverse), which ever is less, 
        #          when a particular direction of travel is not preferable. 
        # 2: Consider feasible path orientation, when using a feasible path whereas the path points have orientation information (e.g. Smac Planners), 
        #           consider the path's requested direction of travel to penalize path angles such that the robot will follow the path in the requested direction.
        mode: 1

      # ----------------------------------------------------------------------------------------------------
      # This critic penalizes unnecessary ‘twisting’ with holonomic vehicles. It adds a constraint on the rotation angle to keep it consistent.  
      TwirlingCritic:
        enabled: true
        # Power order to apply to term.
        twirling_cost_power: 1
        # Weight to apply to critic term.
        twirling_cost_weight: 10.0

local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: True
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      robot_radius: 0.18
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.70
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: True
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      robot_radius: 0.18
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.7
      always_send_full_costmap: True

# The yaml_filename does not need to be specified since it going to be set by defaults in launch.
# If you'd rather set it in the yaml, remove the default "map" value in the tb3_simulation_launch.py
# file & provide full path to map below. If CLI map configuration or launch default is provided, that will be used.
# map_server:
#   ros__parameters:
#     yaml_filename: ""

map_server:
  ros__parameters:
    use_sim_time: True
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True


#In general though, the following table is a good guide for the optimal planning plugin for different types of robot bases:
# Plugin Name                 Supported Robot Types
# NavFn Planner               Circular Differential, Circular Omnidirectional
# Smac Planner 2D             Circular Differential, Circular Omnidirectional
# Theta Star Planner          Circular Differential, Circular Omnidirectional
# Smac Hybrid-A* Planner      Non-circular or Circular Ackermann, Non-circular or Circular Legged
# Smac Lattice Planner        Non-circular Differential, Non-circular Omnidirectional, Arbitrary
# Since the planning problem is primarily driven by the robot type, the table accurately summarizes the advice to users 
# by the maintainers. Within the circular robot regime, the choice of planning algorithm is dependent on application and desirable behavior. 
# NavFn will typically make broad, sweeping curves; Theta* prefers straight lines and supports them at any angle; 
# and Smac 2D is essentially a classical A* algorithm with cost-aware penalties.
# The NavfnPlanner is a global planner plugin for the Nav2 Planner server. It implements the Navigation Function
#  planner with either A* or Dij. expansions. It is largely equivalent to its counterpart in ROS 1 Navigation. 
# The Navfn planner assumes a circular robot (or a robot that can be approximated as circular for the purposes 
# of global path planning) and operates on a weighted costmap.
# See https://docs.nav2.org/tuning/index.html for details
planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      # The NavfnPlanner is a global planner plugin for the Nav2 Planner server. It implements the Navigation Function planner
      # with either A* or Dij. expansions. It is largely equivalent to its counterpart in ROS 1 Navigation. 
      # The Navfn planner assumes a circular robot (or a robot that can be approximated as circular for the purposes 
      # of global path planning) and operates on a weighted costmap.
      plugin: "nav2_navfn_planner/NavfnPlanner" # In Iron and older versions, "/" was used instead of "::"
      # Tolerance in meters between requested goal pose and end of path.
      tolerance: 1.0
      # Whether to use A*. If false, uses Dijkstra’s expansion.
      # The Navfn Planner plugin in ROS (Robot Operating System) can use either the Dijkstra or A* algorithm for path planning. 
      # Here’s a brief overview of the differences between these two algorithms:
      # Dijkstra’s Algorithm
      #   Wavefront Expansion: Dijkstra’s algorithm expands nodes in all directions uniformly, creating a wavefront from the start node.
      #   Optimality: It guarantees finding the shortest path in terms of cost from the start to the goal node.
      #   Speed: It can be slower because it explores all possible paths to ensure the shortest one is found.
      #   Use Case: Best for scenarios where the cost of traversing each edge is the same or when you need the absolute shortest path.
      # A* Algorithm
      #   Heuristic Expansion: A* uses a heuristic to guide its search, prioritizing nodes that are closer to the goal.
      #   Optimality: It also guarantees the shortest path, but only if the heuristic is admissible (never overestimates the cost to reach the goal).
      #   Speed: Generally faster than Dijkstra’s because it uses the heuristic to focus the search, reducing the number of nodes expanded.
      #   Use Case: Ideal for scenarios where you need faster pathfinding and can use a heuristic to estimate the cost to the goal.      
      use_astar: false
      # Whether to allow planning in unknown space.
      allow_unknown: true

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

# The nav2_velocity_smoother is a package containing a lifecycle-component node for smoothing velocities sent by Nav2 to robot controllers. 
# The aim of this package is to implement velocity, acceleration, and deadband smoothing from Nav2 to reduce wear-and-tear on robot motors 
# and hardware controllers by smoothing out the accelerations/jerky movements that might be present with some local trajectory planners' control efforts.
# It supports differential drive and omnidirectional robot platforms primarily, but is applicable to ackermann as well with some interpretations of Twist. 
velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 20.0  # Rate to run smoother
    scale_velocities: false  # scale velocities proportionally if any axis is outside of acceleration range to follow same vector, if possible
    feedback: "OPEN_LOOP"  # Type of feedback for current speed. Open loop uses the last smoothed output. Closed loop uses robot odometry
    max_velocity: [0.5, 0.5, 2.5]  # Maximum velocities, ordered [Vx, Vy, Vw]
    min_velocity: [-0.5, -0.5, -2.5]  # Minimum velocities, ordered [Vx, Vy, Vw]
    deadband_velocity: [0.0, 0.0, 0.0]  # A deadband of velocities below which they should be zero-ed out for sending to the robot base controller, ordered [Vx, Vy, Vw]
    velocity_timeout: 1.0  # Time (s) after which if no new velocity commands are received to zero out and stop
    max_accel: [2.5, 2.5, 3.2]  # Maximum acceleration, ordered [Ax, Ay, Aw]
    max_decel: [-2.5, -2.5, -3.2]  # Maximum deceleration, ordered [Ax, Ay, Aw]
    odom_topic: "/odometry/filtered"  # Topic of odometry to use for estimating current velocities
    odom_duration: 0.1  # Period of time (s) to sample odometry information in for velocity estimation
    enable_stamped_cmd_vel: false # Whether to stamp the velocity. True uses TwistStamped. False uses Twist  

collision_monitor:
  ros__parameters:
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel_smoothed"
    cmd_vel_out_topic: "cmd_vel"
    state_topic: "collision_monitor_state"
    transform_tolerance: 0.2
    source_timeout: 1.0
    base_shift_correction: True
    stop_pub_timeout: 2.0
    # Polygons represent zone around the robot for "stop", "slowdown" and "limit" action types,
    # and robot footprint for "approach" action type.
    polygons: ["FootprintApproach"]
    FootprintApproach:
      type: "polygon"
      action_type: "approach"
      footprint_topic: "/local_costmap/published_footprint"
      time_before_collision: 1.2
      simulation_time_step: 0.1
      min_points: 6
      visualize: False
      enabled: True
    observation_sources: ["scan"]
    scan:
      type: "scan"
      topic: "scan"
      min_height: 0.15
      max_height: 2.0
      enabled: True

docking_server:
  ros__parameters:
    controller_frequency: 50.0
    initial_perception_timeout: 5.0
    wait_charge_timeout: 5.0
    dock_approach_timeout: 30.0
    undock_linear_tolerance: 0.05
    undock_angular_tolerance: 0.1
    max_retries: 3
    base_frame: "base_link"
    fixed_frame: "odom"
    dock_backwards: false
    dock_prestaging_tolerance: 0.5

    # Types of docks
    dock_plugins: ['simple_charging_dock']
    simple_charging_dock:
      plugin: 'opennav_docking::SimpleChargingDock'
      docking_threshold: 0.05
      staging_x_offset: -0.7
      use_external_detection_pose: true
      use_battery_status: false # true
      use_stall_detection: false # true

      external_detection_timeout: 1.0
      external_detection_translation_x: -0.18
      external_detection_translation_y: 0.0
      external_detection_rotation_roll: -1.57
      external_detection_rotation_pitch: -1.57
      external_detection_rotation_yaw: 0.0
      filter_coef: 0.1

    # Dock instances
    # The following example illustrates configuring dock instances.
    # docks: ['home_dock']  # Input your docks here
    # home_dock:
    #   type: 'simple_charging_dock'
    #   frame: map
    #   pose: [0.0, 0.0, 0.0]

    controller:
      k_phi: 3.0
      k_delta: 2.0
      v_linear_min: 0.15
      v_linear_max: 0.15

loopback_simulator:
  ros__parameters:
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    map_frame_id: "map"
    scan_frame_id: "base_scan"  # tb4_loopback_simulator.launch.py remaps to 'rplidar_link'
    update_duration: 0.02